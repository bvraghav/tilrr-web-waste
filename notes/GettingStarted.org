:PROPERTIES:
:header-args:sh+: :shebang "#! /usr/bin/zsh"
:END:
#+TITLE: Notes on jump-starting a vue project

I want to jump-start a vue-based project, so that the
fundamentals like
+ [ ] routes (vue-router),
+ [ ] linting (eslint),
+ [ ] vitest,

+ [ ] css (tailwindcss),
+ [ ] svg icons
+ [ ] icons (xicons),
+ [ ] headlessui,

+ [ ] vue-use,
+ [ ] json-validator (ajv),
+ [ ] vue-meta (page metadata manager),
+ [ ] bvr-node-utils,
+ [ ] jsdom

* VueJs with vite

#+begin_src sh
  export PROJECT_NAME=tilrr-web-app
  pnpm create vue@latest ${PROJECT_NAME}
  cd ${PROJECT_NAME}
  pnpm install
  pnpm format
  pnpm run dev 
#+end_src

+ [X] routes (vue-router),
+ [X] linting (eslint),
+ [X] vitest,

** Expose to network
=package.json=
#+begin_src json
  {
    "scripts": {
      "dev": "vite --host"
    }
  }
#+end_src

** Load Env (and Dotenv) in Vite Config
#+begin_src js2 :eval never
  import { defineConfig, loadEnv } from 'vite';

  export default ({ mode }) => {
      // Load app-level env vars to node-level env vars.
      process.env = {...process.env, ...loadEnv(mode, process.cwd())};

      return defineConfig({
        // To access env vars here use process.env.TEST_VAR
      });
  }
#+end_src

* UI
+ [ ] css (tailwindcss),
+ [ ] svg icons
+ [ ] icons (xicons),
+ [ ] headlessui,

** Tailwind
+ [X] css (tailwindcss),

#+begin_src sh
  pnpm install -D tailwindcss postcss autoprefixer
  npx tailwindcss init -p
#+end_src

=tailwind.config.js=
#+begin_src javascript
  export default {
    content: [
      "./index.html",
      "./src/**/*.{vue,js,ts,jsx,tsx}",
    ],
  }
#+end_src

=src/assets/style.css=
#+begin_src css
  @tailwind base;
  @tailwind components;
  @tailwind utilities;
#+end_src

=src/main.js=
#+begin_src javascript
  // import './assets/main.css'
  import './assets/style.css'
#+end_src

** Xicons
+ [X] icons (xicons),

*** Installation
#+begin_src sh
  pnpm i -D @vicons/fluent \
       @vicons/ionicons4   \
       @vicons/ionicons5   \
       @vicons/antd        \
       @vicons/material    \
       @vicons/fa          \
       @vicons/tabler      \
       @vicons/carbon      \
       @vicons/utils
#+end_src

*** Usage

#+begin_src vue
  <script setup>
  import { Icon } from '@vicons/utils'
  import { Money16Regular } from '@vicons/fluent'
  </script>

  <template>
  <Icon>
    <Money16Regular />
  </Icon>
  </template>
#+end_src

** Vite SVG Loader
+ [X] svg icons

Install
#+begin_src sh
  pnpm i -D vite-svg-loader
#+end_src

=vite.config.js=
#+begin_src javascript
  import svgLoader from 'vite-svg-loader'

  export default defineConfig({
    plugins: [vue(), svgLoader()]
  })
#+end_src

*Controlling The SVG Size (with @vicons/utils)* \\
Use Xicons component =Icon= to wrap the svg
#+begin_src html
  <Icon size="80"><Logo /></Icon>
#+end_src

*Controlling The SVG Size (without @vicons/utils)* \\
Use the HTML =width= and/ or =height= attribute to
control the size. Specifying one of them will scale
with no margin and preserve the aspect ratio, whereas
specifying both will fit, i.e. leave equal margin space
around the unfit side. Eg.
#+begin_src html
  <Logo width="80" class="rounded" />
#+end_src

** HeadlessUI
+ [X] headlessui,

Install  
#+begin_src sh
  pnpm install @headlessui/vue@latest @headlessui/tailwindcss@latest
#+end_src

Usage
#+begin_src html
  <template>
    <Menu>
      <MenuButton>More</MenuButton>
      <MenuItems>
        <MenuItem v-slot="{ active }">
          <a :class='{ "bg-blue-500": active }' href="/account-settings">
            Account settings
          </a>
        </MenuItem>
        <MenuItem v-slot="{ active }">
          <a :class='{ "bg-blue-500": active }' href="/account-settings">
            Documentation
          </a>
        </MenuItem>
        <MenuItem disabled>
          <span class="opacity-75">Invite a friend (coming soon!)</span>
        </MenuItem>
      </MenuItems>
    </Menu>
  </template>

  <script setup>
    import { Menu, MenuButton, MenuItems, MenuItem } from '@headlessui/vue'
  </script>
#+end_src

* Functional
+ [ ] vue-use,
+ [ ] json-validator (ajv),
+ [ ] vue-meta (page metadata manager),
+ [ ] bvr-node-utils,
+ [ ] jsdom

** Vue Use
+ [X] vue-use

Install
#+begin_src sh
  pnpm i @vueuse/core
#+end_src

** Json-schema validator

+ [X] json-validator (ajv),

Install
#+begin_src sh
  pnpm install ajv fluent-json-schema
#+end_src

Usage
#+begin_src javascript
  import Ajv from 'ajv'
  import { S } from 'fluent-json-schema'

  const ajv = new Ajv()

  const schema = S.object()
        .prop('foo', S.integer())
        .prop('bar')
        .required(['foo'])
        .additionalProperties(false)

  const validate = ajv.compile(schema.valueOf())

  const data = {
    foo: 1,
    bar: "abc"
  }

  const valid = validate(data)
  if (!valid) console.log(validate.errors)

#+end_src

** Vue Meta
+ [X] vue-meta (page metadata manager),

Install
#+begin_src sh
  pnpm install vue-meta@3.0.0-alpha.10
#+end_src

=src/main.js=
#+begin_src javascript
  import { createMetaManager } from 'vue-meta'
  app.use(createMetaManager())
#+end_src

Inside of a =<script setup>= of an SFC
#+begin_src javascript
  import { useMeta, useActiveMeta } from 'vue-meta'

  const computedMeta = computed(() => ({
    title: 'My Title',
    description : `Counted ${counter.value} times`
  }))

  const { meta, onRemoved } = useMeta(computedMeta)

  onRemoved(() => {
    // Do something as soon as this metadata is removed,
    // eg because the component instance was destroyed
  })
#+end_src

Inside of =<template>= of the same SFC
#+begin_src html
  <metainfo>
    <template v-slot:title="{content}">
      {{ content }} | Brand
    </template>
  </metainfo>
#+end_src

[[https://github.com/nuxt/vue-meta/tree/next/examples][Check out examples]] for more.

** BVR Node Utils
+ [X] bvr-node-utils,

Install
#+BEGIN_SRC sh
  pnpm i gl:bvraghav/node_utils.git
#+END_SRC

** JSDOM
For testing purposes if required at all

#+begin_src sh
  pnpm i jsdom
#+end_src

* Integrating Firebase

** VueFire Wrapper
https://vuefire.vuejs.org/
#+begin_src sh
  pnpm install vuefire firebase
#+end_src
** Firebase API
#+begin_src sh :eval never
  npm install firebase
#+end_src

Then, initialize Firebase and begin using the SDKs for
the products you'd like to use.
#+begin_src javascript
  // Import the functions you need from the SDKs you need
  import { initializeApp } from "firebase/app";
  import { getAnalytics } from "firebase/analytics";
  // TODO: Add SDKs for Firebase products that you want to use
  // https://firebase.google.com/docs/web/setup#available-libraries

  // Your web app's Firebase configuration
  // For Firebase JS SDK v7.20.0 and later, measurementId is optional
  const firebaseConfig = {
    apiKey: "AIzaSyAefhG8aB_NqLcKKn8PsJzhUCI2p64kiS4",
    authDomain: "tilrr-tile-waste.firebaseapp.com",
    databaseURL: "https://tilrr-tile-waste-default-rtdb.europe-west1.firebasedatabase.app",
    projectId: "tilrr-tile-waste",
    storageBucket: "tilrr-tile-waste.appspot.com",
    messagingSenderId: "866550474786",
    appId: "1:866550474786:web:b9f9d41fdcfd183bfc027b",
    measurementId: "G-PDDQNQZN8C"
  };

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);
  const analytics = getAnalytics(app);
#+end_src

** Deployment
#+begin_src sh
  npm install -g firebase-tools

  # Login to Google
  firebase login

  # Initiate your project
  firebase init

  # Deploy web app
  firebase deploy
#+end_src

App is available at: \\
https://tilrr-tile-waste.web.app/

** App Debug Token

+ Name :: TilrrTileWaste
+ Token :: 36CD9FBD-0136-4639-A857-8E56DA93E404

* GLPK
https://github.com/jvail/glpk.js/
#+begin_src sh
  pnpm install glpk.js
#+end_src

** Example
#+begin_src javascript
  const GLPK = require('glpk.js');
  const glpk = GLPK();
  const options = {
    msglev: glpk.GLP_MSG_ALL,
    presol: true,
    cb: {
      call: progress => console.log(progress),
      each: 1
    }
  };
  const res = glpk.solve({
    name: 'LP',
    objective: {
      direction: glpk.GLP_MAX,
      name: 'obj',
      vars: [
        { name: 'x1', coef: 0.6 },
        { name: 'x2', coef: 0.5 }
      ]
    },
    subjectTo: [
      {
        name: 'cons1',
        vars: [
          { name: 'x1', coef: 1.0 },
          { name: 'x2', coef: 2.0 }
        ],
        bnds: { type: glpk.GLP_UP, ub: 1.0, lb: 0.0 }
      },
      {
        name: 'cons2',
        vars: [
          { name: 'x1', coef: 3.0 },
          { name: 'x2', coef: 1.0 }
        ],
        bnds: { type: glpk.GLP_UP, ub: 2.0, lb: 0.0 }
      }
    ]
  }, options);
#+end_src

